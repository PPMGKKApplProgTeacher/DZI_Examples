Задача 1: Система за управление на университетски преподаватели

Създайте приложение, което моделира различни типове преподаватели в университет. Данните за приложенията трябва да могат да бъдат прочетени или от стандартния вход или от текстов файл във формат по желание

    Основен клас: UniversityMember

        Полета:

            firstName (име) – низ

            lastName (фамилия) – низ

            age (възраст) – цяло число

            salary (заплата) – реално число

        Метод:

            Конструктор, който задава стойности на всички полета.

            Абстрактен метод info(), който извежда информация за преподавателя.

    Наследници на UniversityMember:

        Professor (професор) съдържа:

            researchField (област на изследвания) – низ

        AssistantProfessor (асистент-преподавател) съдържа:

            teachingCourses (брой курсове) – цяло число

        Lecturer (лектор) съдържа:

            teachingExperience (години преподавателски опит) – цяло число

    Задължения:

        Данни за преподавателите да се валидират по следните правила:

            Името и фамилията не могат да са празни.

            Възрастта трябва да е по-голяма от 23 години.

            Заплатата трябва да е положителна.

        В края на програмата трябва да се извеждат:

            Преподавател с най-висока заплата.

            Преподавател с най-много изследвания или курсове, в зависимост от типа.

Задача 2: Система за управление на персонала в хотел

Създайте приложение за управление на различни видове персонал в хотел.

    Основен клас: HotelStaffMember

        Полета:

            firstName (име) – низ

            lastName (фамилия) – низ

            age (възраст) – цяло число

            salary (заплата) – реално число

        Метод:

            Конструктор, който задава стойности на всички полета.

            Абстрактен метод info() за извеждане на информация за персонала.

    Наследници на HotelStaffMember:

        Receptionist (рецепционист) съдържа:

            languagesSpoken (говорими езици) – низ

        Cleaner (хигиенист) съдържа:

            roomsCleaned (броя на почистени стаи) – цяло число

        Chef (готвач) съдържа:

            specialty (специалност в кухнята) – низ

    Задължения:

        Валидиране на данни:

            Името и фамилията не могат да са празни.

            Възрастта трябва да бъде над 18 години.

            Заплатата трябва да е положителна.

        В края на програмата трябва да се извеждат:

            Персонал с най-висока заплата.

            Персонал с най-много почистени стаи или най-много приготвени ястия.

Задача 3: Система за управление на различни видове спортисти

Създайте приложение, което управлява различни типове спортисти в спортен клуб.

    Основен клас: Athlete

        Полета:

            firstName (име) – низ

            lastName (фамилия) – низ

            age (възраст) – цяло число

            salary (заплата) – реално число

        Метод:

            Конструктор, който задава стойности на всички полета.

            Абстрактен метод info() за извеждане на информация за спортиста.

    Наследници на Athlete:

        Runner (бегач) съдържа:

            bestTime (най-добро време) – реално число

        Swimmer (плувец) съдържа:

            bestStroke (най-добър стил) – низ

        Cyclist (колоездач) съдържа:

            bestDistance (най-добро разстояние) – реално число

    Задължения:

        Валидиране на данни:

            Името и фамилията не могат да са празни.

            Възрастта трябва да е по-голяма от 16 години.

            Заплатата трябва да е положителна.

        В края на програмата трябва да се извеждат:

            Спортист с най-висока заплата.

            Спортист с най-добро време, разстояние или резултати в зависимост от вида на спорта.
