

Задача 1: Добавяне на елемент в списък

Напишете програма, която добавя елемент към вече съществуващ списък от цели числа.

List<int> numbers = new List<int>();
numbers. ...<1>... (10);

Задача 2: Извеждане на последния елемент от стек

Напишете програма, която извежда последния елемент от стек, без да го премахва.

Stack<int> stack = new Stack<int>();
stack. ...<1>... ();

Задача 3: Добавяне на елемент в опашка

Напишете програма, която добавя елемент към опашка от низове.

Queue<string> queue = new Queue<string>();
queue. ...<1>... ("Alice");

Задача 4: Премахване на елемент от стек

Напишете програма, която премахва последния добавен елемент от стек.

Stack<int> stack = new Stack<int>();
stack. ...<1>... ();

Задача 5: Проверка дали списък съдържа елемент

Напишете програма, която проверява дали даден елемент съществува в списък от числа.

List<int> list = new List<int>();
bool contains = list. ...<1>... (10);

Задача 6: Извеждане на елемент от опашка

Напишете програма, която извежда и премахва елемент от началото на опашката.

Queue<int> queue = new Queue<int>();
int element = queue. ...<1>... ();

Задача 7: Проверка дали стекът е празен

Напишете програма, която проверява дали стекът е празен.

Stack<int> stack = new Stack<int>();
bool isEmpty = stack. ...<1>... ();

Задача 8: Извеждане на първия елемент от списък

Напишете програма, която извежда първия елемент от списък.

List<int> list = new List<int>();
int firstElement = list. ...<1>... ();

Задача 9: Добавяне на елемент в определена позиция в списък

Напишете програма, която добавя елемент на конкретна позиция в списък от цели числа.

List<int> list = new List<int>();
list. ...<1>... (2, 10); // Добавяне на 10 на позиция 2

Задача 10: Извеждане на всички елементи от стек

Напишете програма, която извежда всички елементи от стек.

Stack<int> stack = new Stack<int>();
foreach (var item in stack. ...<1>... ())
{
    Console.WriteLine(item);
}

Задача 11: Добавяне на елемент в края на опашка

Напишете програма, която добавя елемент в края на опашка.

Queue<string> queue = new Queue<string>();
queue. ...<1>... ("John");

Задача 12: Извеждане на последния елемент от списък

Напишете програма, която извежда последния елемент от списък от низове.

List<string> list = new List<string>();
string lastElement = list. ...<1>... ();

Задача 13: Отстраняване на първия елемент от опашка

Напишете програма, която премахва първия елемент от опашка.

Queue<int> queue = new Queue<int>();
queue. ...<1>... ();

Задача 14: Добавяне на елемент в началото на списък

Напишете програма, която добавя елемент в началото на списък.

List<int> list = new List<int>();
list. ...<1>... (0);

Задача 15: Превъртане на стек (премахване и добавяне на елемент)

Напишете програма, която премахва елемент от стек и веднага добавя нов.

Stack<int> stack = new Stack<int>();
stack. ...<1>... ();  // премахва елемент
stack. ...<2>... (20);  // добавя нов елемент

Задача 16: Проверка за наличност на елемент в опашка

Напишете програма, която проверява дали даден елемент съществува в опашка.

Queue<int> queue = new Queue<int>();
bool contains = queue. ...<1>... (10);

Задача 17: Получаване на размер на стек

Напишете програма, която извежда броя на елементите в стек.

Stack<int> stack = new Stack<int>();
int size = stack. ...<1>... ();

Задача 18: Премахване на последния елемент от списък

Напишете програма, която премахва последния елемент от списък.

List<int> list = new List<int>();
list. ...<1>... ();

Задача 19: Проверка дали опашката е празна

Напишете програма, която проверява дали опашката е празна.

Queue<string> queue = new Queue<string>();
bool isEmpty = queue. ...<1>... ();

Задача 20: Извеждане на всички елементи от опашка

Напишете програма, която извежда всички елементи от опашка.

Queue<int> queue = new Queue<int>();
foreach (var item in queue. ...<1>... ())
{
    Console.WriteLine(item);
}
